<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.SaviorframeworkUserDetailsService" />

	<beans:bean class="org.springframework.security.authentication.event.SaviorframeworkAuthenticationListener"/>
	<beans:bean class="org.springframework.security.access.event.SaviorframeworkAuthorizationListener"/>
	
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" /> 
	
    <beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="passwordEncoder" ref="passwordEncoder" /> 
        <beans:property name="messageSource" ref="messageSource" />
        <beans:property name="userDetailsService" ref="userDetailsService" />
        <beans:property name="hideUserNotFoundExceptions" value="false" />
    </beans:bean>
    
	<beans:bean id="org.springframework.security.authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <beans:property name="providers">
            <beans:list>
				<beans:ref bean="authenticationProvider" />
            </beans:list>
        </beans:property>
	</beans:bean>

	<beans:bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<beans:property name="decisionVoters">
			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter">
					<beans:property name="rolePrefix" value="" />
				</beans:bean>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="filterInvocationSecurityMetadataSource" class="org.springframework.security.web.access.intercept.SaviorframeworkFilterInvocationSecurityMetadataSource" init-method="init">
		<beans:constructor-arg type="org.springframework.security.web.util.UrlMatcher">
			<beans:bean class="org.springframework.security.web.util.AntUrlPathMatcher"></beans:bean>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
		<beans:property name="accessDecisionManager" ref="accessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="filterInvocationSecurityMetadataSource" />
	</beans:bean>
	
	<beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg value="/logout" /> 
			<beans:constructor-arg> 
				<beans:list>
					<beans:bean class="org.springframework.security.web.authentication.logout.SaviorframeworkLogoutEventHandler" />
					<beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
				</beans:list> 
			</beans:constructor-arg> 
	</beans:bean> 
	
	<beans:bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SaviorframeworkAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/" />
	</beans:bean>
	
	<http use-expressions="true" entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/login" filters="none" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/logout" filters="none" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<custom-filter position="LOGOUT_FILTER" ref="logoutFilter" />
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="filterSecurityInterceptor" />
		<custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
		<custom-filter position="FORM_LOGIN_FILTER" ref="authenticationFilter" />
		<!-- <session-management invalid-session-url="/invalid-session" session-authentication-strategy-ref="sas" /> -->
	</http>
	
	<beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login" />
	</beans:bean>
	
	<!-- <beans:bean id="authenticationEntryPoint" class="org.springframework.security.url.UrlEntryPoint">
	</beans:bean> -->
	

	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/invalid-session" />
	</beans:bean>

	<beans:bean id="authenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
		<beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
		<beans:property name="authenticationFailureHandler">
			<beans:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<beans:property name="defaultFailureUrl" value="/login?error=true" />
			</beans:bean>
		</beans:property>
		<beans:property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<beans:property name="sessionAuthenticationStrategy" ref="sas" />
	</beans:bean>

	<beans:bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<!--
			<beans:property name="exceptionIfMaximumExceeded" value="true" />
		-->
	</beans:bean>

	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

</beans:beans>
